name: Optimized Docker Matrix Build

permissions:
  contents: read
  actions: read
  security-events: write

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BUILDKIT_PROGRESS: plain

jobs:
  # Pre-build job for cache preparation and URG library
  prepare-cache:
    name: Prepare Build Cache
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
      urg-cache-key: ${{ steps.cache-keys.outputs.urg-cache-key }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Generate cache keys
      id: cache-keys
      run: |
        DOCKER_CACHE_KEY="docker-buildkit-${{ runner.os }}-${{ hashFiles('docker/Dockerfile.rpi*', 'docker/build.sh', 'CMakeLists.txt', 'cmake/**') }}"
        URG_CACHE_KEY="urg-library-${{ runner.os }}-${{ hashFiles('external/urg_library/**') }}"
        echo "cache-key=${DOCKER_CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "urg-cache-key=${URG_CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "Docker cache key: ${DOCKER_CACHE_KEY}"
        echo "URG cache key: ${URG_CACHE_KEY}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
        buildkitd-flags: |
          --allow-insecure-entitlement security.insecure
          --allow-insecure-entitlement network.host

  # Parallel build matrix for multiple platforms
  build-matrix:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.runner }}
    needs: prepare-cache
    permissions:
      contents: read
      packages: write
      security-events: write
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        platform: [linux/amd64, linux/arm64, darwin/amd64, darwin/arm64, windows/amd64]
        include:
        # Docker builds for Linux
        - platform: linux/amd64
          platform-pair: linux-amd64
          dockerfile: docker/Dockerfile.rpi.optimized
          runner: ubuntu-latest
          build-method: docker
        - platform: linux/arm64
          platform-pair: linux-arm64
          dockerfile: docker/Dockerfile.rpi.optimized
          runner: ubuntu-latest
          build-method: docker
        # Native builds for macOS
        - platform: darwin/amd64
          platform-pair: darwin-amd64
          runner: macos-13
          build-method: cmake
        - platform: darwin/arm64
          platform-pair: darwin-arm64
          runner: macos-latest
          build-method: cmake
        # Native build for Windows
        - platform: windows/amd64
          platform-pair: windows-amd64
          runner: windows-2019
          build-method: cmake

    env:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      DOCKER_BUILD_MEMORY_LIMIT: 6g

    steps:
    - name: Set up QEMU
      if: matrix.build-method == 'docker'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Compute image tag
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          TAG=${GITHUB_REF#refs/tags/}
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          TAG="latest"
        else
          TAG='${{ github.ref_name }}'
        fi
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "Using TAG=$TAG"
      shell: bash

    # Docker-specific setup
    - name: Set up Docker Buildx
      if: matrix.build-method == 'docker'
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
        buildkitd-flags: |
          --allow-insecure-entitlement security.insecure
          --allow-insecure-entitlement network.host

    - name: Log in to Container Registry
      if: matrix.build-method == 'docker' && github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      if: matrix.build-method == 'docker'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-${{ matrix.platform-pair }}
          type=ref,event=pr,suffix=-${{ matrix.platform-pair }}
          type=semver,pattern={{version}},suffix=-${{ matrix.platform-pair }}
          type=raw,value=latest,suffix=-${{ matrix.platform-pair }},enable={{is_default_branch}}

    # macOS-specific setup
    - name: Set up Homebrew dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "::group::Install macOS dependencies"
        brew update
        
        # Handle cmake installation carefully to avoid tap conflicts
        if ! command -v cmake &> /dev/null; then
          echo "Installing cmake..."
          brew install cmake
        else
          echo "cmake already installed, skipping..."
          cmake --version
        fi
        
        # Install other required dependencies for HokuyoHub (including ASIO for CrowCpp)
        brew install pkg-config yaml-cpp jsoncpp nng asio
        echo "::endgroup::"

    # Windows-specific setup
    - name: Set up MSVC (Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        vsversion: 2019

    - name: Set up vcpkg (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "::group::Install Windows dependencies"
        # Install vcpkg if not present
        if (!(Test-Path "C:\vcpkg")) {
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat -disableMetrics
        }
        # Install required dependencies
        C:\vcpkg\vcpkg.exe install yaml-cpp:x64-windows jsoncpp:x64-windows nng:x64-windows asio:x64-windows
        echo "CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake" >> $env:GITHUB_ENV
        echo "::endgroup::"

    # Unified caching for all platforms
    - name: Cache URG Library Build
      uses: actions/cache@v4
      with:
        path: |
          external/urg_library/current/src/*.a
          external/urg_library/current/include
          build-cache/urg-${{ matrix.platform-pair }}
          build/${{ matrix.platform-pair }}
        key: ${{ needs.prepare-cache.outputs.urg-cache-key }}-${{ matrix.platform-pair }}-${{ matrix.platform }}-${{ runner.os }}
        restore-keys: |
          urg-library-${{ runner.os }}-${{ matrix.platform-pair }}-${{ matrix.platform }}
          urg-library-${{ runner.os }}-${{ matrix.platform-pair }}

    - name: Cache Build Dependencies
      if: matrix.build-method == 'cmake'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.conan
          ~/Library/Caches/Homebrew
          C:\Users\runneradmin\AppData\Local\pip\Cache
          C:\vcpkg\installed
        key: deps-${{ runner.os }}-${{ matrix.platform-pair }}-${{ hashFiles('CMakeLists.txt', 'cmake/**') }}
        restore-keys: |
          deps-${{ runner.os }}-${{ matrix.platform-pair }}
          deps-${{ runner.os }}

    - name: Cache Docker BuildKit layers
      if: matrix.build-method == 'docker'
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache-${{ matrix.platform-pair }}
        key: ${{ needs.prepare-cache.outputs.cache-key }}-${{ matrix.platform-pair }}
        restore-keys: |
          docker-buildkit-${{ runner.os }}-${{ matrix.platform-pair }}

    # Docker build steps (Linux only)
    - name: Pre-build URG Library (Docker - if not cached)
      if: matrix.build-method == 'docker'
      run: |
        echo "::group::Pre-build URG Library for ${{ matrix.platform }}"
        mkdir -p build-cache/urg-${{ matrix.platform-pair }}
        if [ ! -d "build-cache/urg-${{ matrix.platform-pair }}" ]; then
          echo "Error: Build context path does not exist"
          exit 1
        fi
        echo "Build context validated: $(pwd)/build-cache/urg-${{ matrix.platform-pair }}"
        if [ ! -f "external/urg_library/current/src/liburg_c.a" ]; then
          echo "Building URG library from source..."
          cd external/urg_library/current
          make clean
          make -j$(nproc)
          cp -r include ../../../build-cache/urg-${{ matrix.platform-pair }}/
          cp src/*.a ../../../build-cache/urg-${{ matrix.platform-pair }}/
        else
          echo "URG library already built, using cache"
        fi
        echo "::endgroup::"

    - name: Monitor system resources before build (Docker)
      if: matrix.build-method == 'docker'
      run: |
        echo "=== System Resource Status ==="
        df -h
        free -h
        echo "Used memory %: $(free -m | awk 'NR==2{printf \"%.1f%%\\n\", $3*100/$2 }')"

    - name: Build and push Docker image
      if: matrix.build-method == 'docker'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        platforms: ${{ matrix.platform }}
        target: runtime
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}-${{ matrix.platform-pair }}
          ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=local,src=/tmp/.buildx-cache-${{ matrix.platform-pair }}
          type=gha,scope=build-${{ matrix.platform-pair }}
        cache-to: |
          type=local,dest=/tmp/.buildx-cache-${{ matrix.platform-pair }},mode=max
          type=gha,scope=build-${{ matrix.platform-pair }},mode=max
        build-contexts: |
          urg-cache=build-cache/urg-${{ matrix.platform-pair }}
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          PLATFORM=${{ matrix.platform }}
          DOCKER_BUILD_MEMORY_LIMIT=${{ env.DOCKER_BUILD_MEMORY_LIMIT }}

    - name: Verify pushed image exists (Docker)
      if: matrix.build-method == 'docker' && github.event_name != 'pull_request'
      run: |
        IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}-${{ matrix.platform-pair }}"
        echo "Verifying image: $IMAGE"
        docker buildx imagetools inspect "$IMAGE"

    - name: Monitor system resources after build (Docker)
      if: matrix.build-method == 'docker'
      run: |
        echo "=== Post-build System Resource Status ==="
        df -h
        free -h
        docker system df
        if [ $(df / | tail -1 | awk '{print $4}' | sed 's/[^0-9]//g') -lt 2048 ]; then
          echo "Low disk space detected, cleaning up..."
          docker system prune -f --volumes
        fi

    - name: Extract build artifacts (Docker)
      if: matrix.build-method == 'docker' && github.event_name != 'pull_request'
      run: |
        echo "::group::Extract Build Artifacts for ${{ matrix.platform }}"
        IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}-${{ matrix.platform-pair }}"
        echo "Pulling image: $IMAGE"
        docker pull --platform=${{ matrix.platform }} "$IMAGE"
        ./scripts/utils/extract_docker_artifacts.sh "$IMAGE" "${{ matrix.platform-pair }}" || echo "Extraction failed, continuing..."
        echo "::endgroup::"

    # Native CMake build steps (macOS/Windows)
    - name: Configure CMake build
      if: matrix.build-method == 'cmake'
      run: |
        echo "::group::Configure CMake for ${{ matrix.platform }}"
        mkdir -p build/${{ matrix.platform-pair }}
        cd build/${{ matrix.platform-pair }}
        
        if [ "${{ runner.os }}" = "Windows" ]; then
          cmake ../.. -G "Visual Studio 16 2019" -A x64 \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE="${CMAKE_TOOLCHAIN_FILE}" \
            -DDEPS_MODE=auto
        else
          # For macOS, add ASIO hints to help CMake find ASIO headers
          if [ "${{ runner.os }}" = "macOS" ]; then
            ASIO_INCLUDE_DIR=$(brew --prefix asio)/include
            cmake ../.. \
              -DCMAKE_BUILD_TYPE=Release \
              -DDEPS_MODE=auto \
              -DASIO_INCLUDE_DIR="${ASIO_INCLUDE_DIR}"
          else
            cmake ../.. \
              -DCMAKE_BUILD_TYPE=Release \
              -DDEPS_MODE=auto
          fi
        fi
        echo "::endgroup::"
      shell: bash

    - name: Build with CMake
      if: matrix.build-method == 'cmake'
      run: |
        echo "::group::Build with CMake for ${{ matrix.platform }}"
        cd build/${{ matrix.platform-pair }}
        
        if [ "${{ runner.os }}" = "Windows" ]; then
          cmake --build . --config Release --parallel 4
        else
          cmake --build . --config Release --parallel $(sysctl -n hw.ncpu 2>/dev/null || nproc)
        fi
        echo "::endgroup::"
      shell: bash

    - name: Install to dist directory
      if: matrix.build-method == 'cmake'
      run: |
        echo "::group::Install artifacts for ${{ matrix.platform }}"
        cd build/${{ matrix.platform-pair }}
        
        # Install to platform-specific directory
        cmake --install . --prefix "../../dist/${{ matrix.platform-pair }}"
        
        # Verify installation
        ls -la "../../dist/${{ matrix.platform-pair }}/"
        
        # Make binary executable on Unix systems
        if [ "${{ runner.os }}" != "Windows" ]; then
          chmod +x "../../dist/${{ matrix.platform-pair }}/hokuyo_hub" || true
        fi
        echo "::endgroup::"
      shell: bash

    - name: Create platform-specific artifacts README
      if: matrix.build-method == 'cmake' && github.event_name != 'pull_request'
      run: |
        echo "::group::Create artifacts README for ${{ matrix.platform }}"
        
        DIST_DIR="dist/${{ matrix.platform-pair }}"
        OS_NAME="${{ runner.os }}"
        ARCH="${{ matrix.platform-pair }}"
        
        cat > "${DIST_DIR}/README.md" << EOF
        # Hokuyo Hub - ${OS_NAME} Distribution
        
        This directory contains the compiled Hokuyo Hub application for ${ARCH}.
        
        ## Directory Structure
        
        This follows the platform-specific directory structure pattern:
        - \`dist/darwin-amd64/\` - macOS Intel builds
        - \`dist/darwin-arm64/\` - macOS Apple Silicon builds
        - \`dist/linux-amd64/\` - Linux AMD64 builds
        - \`dist/linux-arm64/\` - Linux ARM64 builds
        - \`dist/windows-amd64/\` - Windows x64 builds
        
        ## Contents
        
        - \`hokuyo_hub\` - Main application binary (${ARCH})
        - \`configs/\` - Configuration files
        - \`webui/\` - Web user interface files
        
        ## Installation
        
        1. Copy all files to your target ${OS_NAME} system
        2. Run the application: \`./hokuyo_hub\` (Unix) or \`hokuyo_hub.exe\` (Windows)
        
        ## Requirements
        
        - ${OS_NAME} system (${ARCH})
        - System libraries installed via native package manager
        
        ## Build Information
        
        - Built using native CMake build
        - Target platform: ${{ matrix.platform }}
        - Build date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - Dependencies: Auto-resolved via CMake
        - Platform-specific output: dist/${ARCH}/
        
        EOF
        echo "::endgroup::"
      shell: bash

    - name: Upload platform-specific artifacts
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: hokuyohub-${{ matrix.platform-pair }}   # linux-amd64 / linux-arm64 / darwin-amd64 / darwin-arm64 / windows-amd64
        path: |
          dist/
        retention-days: 30

  # Parallel testing job
  test-matrix:
    name: Test ${{ matrix.platform }}
    runs-on: ubuntu-latest
    needs: [prepare-cache, build-matrix]
    if: github.event_name != 'pull_request' && needs.build-matrix.result == 'success'
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
        - platform: linux/amd64
          platform-pair: linux-amd64
        - platform: linux/arm64
          platform-pair: linux-arm64
    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Compute image tag
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          TAG=${GITHUB_REF#refs/tags/}
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          TAG="latest"
        else
          TAG='${{ github.ref_name }}'
        fi
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "Using TAG=$TAG"
      shell: bash

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Test container startup
      run: |
        echo "::group::Test Container Startup - ${{ matrix.platform }}"
        docker run -d --name test-container-${{ matrix.platform-pair }} --platform ${{ matrix.platform }} \
          -p 8080:8080 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}-${{ matrix.platform-pair }} || echo "Container start failed"
        sleep 10
        if docker ps | grep -q test-container-${{ matrix.platform-pair }}; then
          echo "✅ Container started successfully"
          docker logs test-container-${{ matrix.platform-pair }}
        else
          echo "❌ Container failed to start"
          docker logs test-container-${{ matrix.platform-pair }} || true
        fi
        docker stop test-container-${{ matrix.platform-pair }} || true
        docker rm test-container-${{ matrix.platform-pair }} || true
        echo "::endgroup::"

    - name: Run API tests
      if: matrix.platform == 'linux/amd64'
      run: |
        echo "::group::API Tests"
        chmod +x scripts/testing/test_rest_api.sh
        ./scripts/testing/test_rest_api.sh || echo "API tests failed, continuing..."
        echo "::endgroup::"

  # Security scanning in parallel
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-matrix
    if: github.event_name != 'pull_request' && needs.build-matrix.result == 'success'
    permissions:
      contents: read
      packages: read
      actions: read
      security-events: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Compute image tag
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          TAG=${GITHUB_REF#refs/tags/}
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          TAG="latest"
        else
          TAG='${{ github.ref_name }}'
        fi
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "Using TAG=$TAG"
      shell: bash

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}-linux-amd64
        format: 'sarif'
        output: 'trivy-results.sarif'
        # args: --scanners vuln

    - name: Upload Trivy SARIF as artifact
      uses: actions/upload-artifact@v4
      with:
        name: trivy-sarif
        path: trivy-results.sarif

  # Multi-platform manifest creation
  create-manifest:
    name: Create Multi-Platform Manifest
    runs-on: ubuntu-latest
    needs: [build-matrix, test-matrix]
    if: github.event_name != 'pull_request' && needs.build-matrix.result == 'success'
    permissions:
      contents: read
      packages: write
    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Compute image tag
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          TAG=${GITHUB_REF#refs/tags/}
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          TAG="latest"
        else
          TAG='${{ github.ref_name }}'
        fi
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "Using TAG=$TAG"
      shell: bash

    - name: Create and push multi-platform manifest
      run: |
        echo "::group::Create Multi-Platform Manifest"
        BASE_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        docker buildx imagetools create -t ${BASE_IMAGE}:${TAG} \
          ${BASE_IMAGE}:${TAG}-linux-amd64 \
          ${BASE_IMAGE}:${TAG}-linux-arm64
        echo "✅ Multi-platform manifest created: ${BASE_IMAGE}:${TAG}"
        echo "::endgroup::"

  # Release job (only for tags) - 別パッケージを同一リリースに添付
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-matrix, security, create-manifest]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Download artifacts for all platforms
    - name: Download Linux AMD64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: hokuyohub-linux-amd64
        path: dist/linux-amd64

    - name: Download Linux ARM64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: hokuyohub-linux-arm64
        path: dist/linux-arm64

    - name: Download macOS AMD64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: hokuyohub-darwin-amd64
        path: dist/darwin-amd64

    - name: Download macOS ARM64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: hokuyohub-darwin-arm64
        path: dist/darwin-arm64

    - name: Download Windows AMD64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: hokuyohub-windows-amd64
        path: dist/windows-amd64

    # Create platform-specific packages
    - name: Create standalone packages (all platforms)
      run: |
        echo "::group::Create Standalone Packages for All Platforms"
        mkdir -p deployment

        # Linux AMD64
        if [ -d "dist/linux-amd64" ]; then
          mkdir -p deployment/linux-amd64
          cp -r dist/linux-amd64/* deployment/linux-amd64/ 2>/dev/null || true
          cat > deployment/linux-amd64/install.sh << 'EOF'
        #!/bin/bash
        set -e
        chmod +x hokuyo_hub || true
        echo "Linux AMD64 package ready. Run: ./hokuyo_hub --config configs/default.yaml"
        EOF
          chmod +x deployment/linux-amd64/install.sh
          tar -czf deployment/hokuyohub-${{ github.ref_name }}-linux-amd64.tar.gz -C deployment/linux-amd64 .
        fi

        # Linux ARM64
        if [ -d "dist/linux-arm64" ]; then
          mkdir -p deployment/linux-arm64
          cp -r dist/linux-arm64/* deployment/linux-arm64/ 2>/dev/null || true
          cat > deployment/linux-arm64/install.sh << 'EOF'
        #!/bin/bash
        set -e
        chmod +x hokuyo_hub || true
        echo "Linux ARM64 package ready. Run: ./hokuyo_hub --config configs/default.yaml"
        EOF
          chmod +x deployment/linux-arm64/install.sh
          tar -czf deployment/hokuyohub-${{ github.ref_name }}-linux-arm64.tar.gz -C deployment/linux-arm64 .
        fi

        # macOS AMD64
        if [ -d "dist/darwin-amd64" ]; then
          mkdir -p deployment/darwin-amd64
          cp -r dist/darwin-amd64/* deployment/darwin-amd64/ 2>/dev/null || true
          cat > deployment/darwin-amd64/install.sh << 'EOF'
        #!/bin/bash
        set -e
        chmod +x hokuyo_hub || true
        echo "macOS Intel package ready. Run: ./hokuyo_hub --config configs/default.yaml"
        EOF
          chmod +x deployment/darwin-amd64/install.sh
          tar -czf deployment/hokuyohub-${{ github.ref_name }}-darwin-amd64.tar.gz -C deployment/darwin-amd64 .
        fi

        # macOS ARM64
        if [ -d "dist/darwin-arm64" ]; then
          mkdir -p deployment/darwin-arm64
          cp -r dist/darwin-arm64/* deployment/darwin-arm64/ 2>/dev/null || true
          cat > deployment/darwin-arm64/install.sh << 'EOF'
        #!/bin/bash
        set -e
        chmod +x hokuyo_hub || true
        echo "macOS Apple Silicon package ready. Run: ./hokuyo_hub --config configs/default.yaml"
        EOF
          chmod +x deployment/darwin-arm64/install.sh
          tar -czf deployment/hokuyohub-${{ github.ref_name }}-darwin-arm64.tar.gz -C deployment/darwin-arm64 .
        fi

        # Windows AMD64
        if [ -d "dist/windows-amd64" ]; then
          mkdir -p deployment/windows-amd64
          cp -r dist/windows-amd64/* deployment/windows-amd64/ 2>/dev/null || true
          cat > deployment/windows-amd64/install.bat << 'EOF'
        @echo off
        echo Windows x64 package ready. Run: hokuyo_hub.exe --config configs/default.yaml
        EOF
          cd deployment/windows-amd64 && zip -r ../hokuyohub-${{ github.ref_name }}-windows-amd64.zip . && cd ../..
        fi

        ls -lh deployment/
        echo "::endgroup::"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          deployment/hokuyohub-${{ github.ref_name }}-linux-amd64.tar.gz
          deployment/hokuyohub-${{ github.ref_name }}-linux-arm64.tar.gz
          deployment/hokuyohub-${{ github.ref_name }}-darwin-amd64.tar.gz
          deployment/hokuyohub-${{ github.ref_name }}-darwin-arm64.tar.gz
          deployment/hokuyohub-${{ github.ref_name }}-windows-amd64.zip
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        body: |
          ## HokuyoHub ${{ github.ref_name }} - Multi-Platform Release

          ### 🐳 Docker (Linux multi-arch)
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          docker run -d -p 8080:8080 --name hokuyohub ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ```

          ### 📦 Native Binaries (choose your platform)
          
          #### Linux
          - **Linux x64**: `hokuyohub-${{ github.ref_name }}-linux-amd64.tar.gz`
          - **Linux ARM64**: `hokuyohub-${{ github.ref_name }}-linux-arm64.tar.gz` (Raspberry Pi 5)
          
          #### macOS
          - **macOS Intel**: `hokuyohub-${{ github.ref_name }}-darwin-amd64.tar.gz`
          - **macOS Apple Silicon**: `hokuyohub-${{ github.ref_name }}-darwin-arm64.tar.gz`
          
          #### Windows
          - **Windows x64**: `hokuyohub-${{ github.ref_name }}-windows-amd64.zip`

          ### 🚀 Quick Start
          1. Download the appropriate package for your platform
          2. Extract the archive
          3. Run `./hokuyo_hub --config configs/default.yaml` (Unix) or `hokuyo_hub.exe --config configs\default.yaml` (Windows)

          ### 🌐 Web Interface
          Access the web interface at http://localhost:8080 after starting the application.

          ### 📋 System Requirements
          - **Linux**: x64 or ARM64 architecture, common system libraries
          - **macOS**: macOS 10.15+ (Intel) or macOS 11.0+ (Apple Silicon)
          - **Windows**: Windows 10/11 x64, Visual C++ Redistributable

  # Documentation update job
  docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-manifest]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update README with build info
      run: |
        sed -i "s/Build Status: .*/Build Status: [![Build](https:\/\/github.com\/${{ github.repository }}\/actions\/workflows\/docker-matrix-build.yml\/badge.svg)](https:\/\/github.com\/${{ github.repository }}\/actions\/workflows\/docker-matrix-build.yml)/" README.md || true
        mkdir -p docs/build/
        cat > docs/build/PERFORMANCE.md << 'EOF'
        # Build Performance Metrics

        ## Optimized Docker Matrix Build

        - Build Time: Improved via matrix and caching
        - Parallel Execution: linux/amd64, linux/arm64, darwin/amd64, darwin/arm64, windows/amd64
        - Caching: BuildKit layer + URG dep cache + native dependency cache
        - Runners: ubuntu-latest, macos-13, macos-latest, windows-latest

        Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        EOF

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md docs/build/ || true
        git diff --staged --quiet || git commit -m "docs: update build performance info [skip ci]"
        git push || true