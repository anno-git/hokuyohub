# =============================================================================
# Multi-stage Dockerfile for Hokuyo Hub - Raspberry Pi ARM64 Build (Fixed)
# =============================================================================
# This Dockerfile implements the Phase 3 Docker/CI/CD approach for building
# Hokuyo Hub targeting Raspberry Pi ARM64 architecture with build fixes.
#
# Build stages:
# 1. build-deps: Install build dependencies and tools
# 2. build-app: Build the application with unified dependency management
# 3. runtime: Minimal runtime image with only necessary components
#
# Usage:
#   docker buildx build --platform linux/arm64 -f docker/Dockerfile.rpi.fixed -t hokuyo-hub:rpi .
#   docker buildx build --platform linux/arm64 -f docker/Dockerfile.rpi.fixed --target build-app -t hokuyo-hub:build .

# =============================================================================
# Stage 1: Build Dependencies
# =============================================================================
FROM --platform=linux/arm64 debian:bookworm-slim AS build-deps

# Install build dependencies
RUN apt-get update && apt-get install -y \
    # Build essentials
    build-essential \
    cmake \
    ninja-build \
    pkg-config \
    git \
    # C++ dependencies available in Debian Bookworm
    # CrowCpp requires minimal system dependencies
    libyaml-cpp-dev \
    libnng-dev \
    # Dependencies for CrowCpp (header-only, but needs these at runtime)
    libssl-dev \
    zlib1g-dev \
    # Note: CrowCpp is header-only and uses asio (included), so fewer deps needed
    libuuid1 \
    uuid-dev \
    # Cleanup
    && rm -rf /var/lib/apt/lists/*

# Verify installed packages
# Verify installed packages
RUN echo "=== Installed Package Versions ===" && \
    dpkg -l | grep -E "(libyaml-cpp|libnng)" && \
    echo "=== CMake Version ===" && \
    cmake --version && \
    echo "=== GCC Version ===" && \
    gcc --version

# =============================================================================
# Stage 2: Application Build
# =============================================================================
FROM build-deps AS build-app

# Set working directory
WORKDIR /build

# Copy source code
COPY . .

# Configure build environment for container
# Use system packages for available dependencies (CrowCpp is header-only)
ENV DEPS_MODE=auto
ENV DEPS_CROWCPP=system
ENV DEPS_YAMLCPP=system
ENV DEPS_NNG=system
ENV DEPS_URG=bundled
ENV HOKUYO_NNG_ENABLE=ON
ENV USE_OSC=ON

# Create build directory and configure
RUN mkdir -p build/linux-arm64

# Configure CMake with system dependencies and CrowCpp
RUN cd build/linux-arm64 && \
    cmake ../.. \
    -G Ninja \
    -DCMAKE_BUILD_TYPE=Release \
    -DDEPS_MODE=auto \
    -DDEPS_CROWCPP=system \
    -DDEPS_YAMLCPP=system \
    -DDEPS_NNG=system \
    -DDEPS_URG=bundled \
    -DHOKUYO_NNG_ENABLE=ON \
    -DUSE_OSC=ON \
    -DCMAKE_INSTALL_PREFIX=/opt/hokuyo-hub \
    -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
    -DBUILD_EXAMPLES=OFF \
    -DBUILD_TESTING=OFF

# Build only the main application target (not examples)
RUN cd build/linux-arm64 && \
    ninja -v hokuyo_hub

# Install to staging area
RUN cd build/linux-arm64 && \
    DESTDIR=/staging ninja install

# Verify build output
RUN echo "=== Build Verification ===" && \
    file build/linux-arm64/hokuyo_hub && \
    ldd build/linux-arm64/hokuyo_hub && \
    ls -la /staging/opt/hokuyo-hub/

# =============================================================================
# Stage 3: Runtime Image
# =============================================================================
FROM --platform=linux/arm64 debian:bookworm-slim AS runtime

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    # Runtime libraries for application dependencies
    libyaml-cpp0.7 \
    libnng1 \
    # System libraries for CrowCpp (minimal runtime dependencies)
    libssl3 \
    zlib1g \
    # System utilities
    ca-certificates \
    curl \
    # Cleanup
    && rm -rf /var/lib/apt/lists/*

# Create application user
RUN groupadd -r hokuyo && useradd -r -g hokuyo hokuyo

# Copy application from build stage
COPY --from=build-app /staging/opt/hokuyo-hub /opt/hokuyo-hub

# Set ownership
RUN chown -R hokuyo:hokuyo /opt/hokuyo-hub

# Create data directory
RUN mkdir -p /var/lib/hokuyo-hub && \
    chown hokuyo:hokuyo /var/lib/hokuyo-hub

# Switch to application user
USER hokuyo

# Set working directory
WORKDIR /opt/hokuyo-hub

# Expose default ports
EXPOSE 8080 8081

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/api/health || exit 1

# Default command
CMD ["./hokuyo_hub"]

# =============================================================================
# Metadata
# =============================================================================
LABEL maintainer="Hokuyo Hub Team"
LABEL description="Hokuyo Hub - Raspberry Pi ARM64 Runtime (CrowCpp Fixed Build)"
LABEL version="1.0.0-crowcpp"
LABEL architecture="arm64"
LABEL target="raspberry-pi-5"