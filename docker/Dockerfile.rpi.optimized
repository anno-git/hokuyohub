# =============================================================================
# Optimized Multi-stage Dockerfile for Hokuyo Hub - Raspberry Pi ARM64 Build
# =============================================================================
# This optimized Dockerfile uses aggressive caching and pre-built dependencies
# to dramatically reduce build times, especially for CI/CD environments.
#
# Build stages:
# 1. build-deps: Install system dependencies (CrowCpp is header-only)
# 2. build-app: Build the application with CrowCpp
# 3. runtime: Minimal runtime image
#
# Usage:
#   docker buildx build --platform linux/arm64 -f docker/Dockerfile.rpi.optimized -t hokuyo-hub:rpi-fast .
#

# =============================================================================
# Stage 1: Build Dependencies (CrowCpp is header-only, no pre-build needed)
# =============================================================================
FROM --platform=linux/arm64 debian:bookworm-slim AS build-deps

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    ninja-build \
    pkg-config \
    git \
    file \
    # Dependencies for CrowCpp (header-only, but needs these at build time)
    libssl-dev \
    zlib1g-dev \
    libuuid1 \
    uuid-dev \
    libasio-dev \
    # Application-specific dependencies
    libyaml-cpp-dev \
    libnng-dev \
    && rm -rf /var/lib/apt/lists/*

# Verify installed packages
RUN echo "=== Build Dependencies Installed ===" && \
    dpkg -l | grep -E "(libyaml-cpp|libnng|libssl)" && \
    echo "=== CMake Version ===" && \
    cmake --version

# =============================================================================
# Stage 2: Application Build (Very Fast with CrowCpp!)
# =============================================================================
FROM build-deps AS build-app

# Set working directory
WORKDIR /build

# Copy source code
COPY . .

# Configure build environment to use CrowCpp (header-only)
ENV DEPS_MODE=system
ENV DEPS_CROWCPP=system
ENV DEPS_YAMLCPP=system
ENV DEPS_NNG=system
ENV DEPS_URG=bundled
ENV HOKUYO_NNG_ENABLE=ON
ENV USE_OSC=ON

# Rebuild URG library for Linux ARM64 (platform-specific directory)
RUN echo "=== Rebuilding URG Library for Linux ARM64 ===" && \
    cd external/urg_library/current && \
    make clean && \
    make && \
    mkdir -p /build/build/linux-arm64/third_party/urg_library/include && \
    mkdir -p /build/build/linux-arm64/third_party/urg_library/lib && \
    cp -r include/* /build/build/linux-arm64/third_party/urg_library/include/ && \
    cp src/liburg_c.a /build/build/linux-arm64/third_party/urg_library/lib/ && \
    echo "URG library rebuilt successfully for linux-arm64"

# Create build directory
RUN mkdir -p build/linux-arm64

# Configure CMake with CrowCpp (header-only - VERY FAST!)
RUN cd build/linux-arm64 && \
    cmake ../.. \
        -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DDEPS_MODE=system \
        -DDEPS_CROWCPP=system \
        -DDEPS_YAMLCPP=system \
        -DDEPS_NNG=system \
        -DDEPS_URG=bundled \
        -DHOKUYO_NNG_ENABLE=ON \
        -DUSE_OSC=ON \
        -DCMAKE_INSTALL_PREFIX=/opt/hokuyohub \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
        -DCMAKE_CXX_FLAGS="-O3" \
        -DCMAKE_C_FLAGS="-O3"

# Build the application (VERY FAST - CrowCpp is header-only!)
RUN cd build/linux-arm64 && \
    ninja -v -j$(nproc) hokuyo_hub

# Install to staging area
RUN cd build/linux-arm64 && \
    DESTDIR=/staging ninja install

# Verify build output
RUN echo "=== Build Verification ===" && \
    file build/linux-arm64/hokuyo_hub && \
    ldd build/linux-arm64/hokuyo_hub || true && \
    ls -la /staging/opt/hokuyohub/

# =============================================================================
# Stage 3: Runtime Image (Minimal)
# =============================================================================
FROM --platform=linux/arm64 debian:bookworm-slim AS runtime

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    # System runtime libraries for CrowCpp
    libssl3 \
    zlib1g \
    # Application runtime libraries
    libyaml-cpp0.7 \
    libnng1 \
    # System utilities
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create application user
RUN groupadd -r hokuyo && useradd -r -g hokuyo hokuyo

# Copy application from build stage
COPY --from=build-app /staging/opt/hokuyohub /opt/hokuyohub

# Set ownership
RUN chown -R hokuyo:hokuyo /opt/hokuyohub

# Create data directory
RUN mkdir -p /var/lib/hokuyo-hub && \
    chown hokuyo:hokuyo /var/lib/hokuyo-hub

# Switch to application user
USER hokuyo

# Set working directory
WORKDIR /opt/hokuyohub

# Expose default ports
EXPOSE 8080 8081

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/api/health || exit 1

# Default command
CMD ["./hokuyo_hub"]

# =============================================================================
# Metadata
# =============================================================================
LABEL maintainer="Hokuyo Hub Team"
LABEL description="Hokuyo Hub - Raspberry Pi ARM64 Runtime (CrowCpp Optimized)"
LABEL version="1.0.0-crowcpp"
LABEL architecture="arm64"
LABEL target="raspberry-pi-5"
LABEL build_optimization="crowcpp_header_only"